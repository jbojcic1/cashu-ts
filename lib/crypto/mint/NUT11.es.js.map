{"version":3,"file":"NUT11.es.js","sources":["../../../src/crypto/mint/NUT11.ts"],"sourcesContent":["import { schnorr } from '@noble/curves/secp256k1';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { parseSecret } from '../common/NUT11.js';\nimport { Proof } from '../common/index.js';\nimport { BlindedMessage } from '../client/index.js';\n\nexport const verifyP2PKSig = (proof: Proof) => {\n\tif (!proof.witness) {\n\t\tthrow new Error('could not verify signature, no witness provided');\n\t}\n\tconst parsedSecret = parseSecret(proof.secret);\n\n\t// const tags = {} as Tags\n\t// parsedSecret[1].tags.forEach((e: string[]) => {tags[e[0]]=e.shift()})\n\t// if (tags.locktime) {\n\t//     const locktime = parseInt(tags.locktime[1])\n\n\t//     let isUnlocked = false\n\t//     if (Math.floor(Date.now() / 1000)>=locktime) {\n\t//         isUnlocked = true\n\t//     }\n\t// }\n\t// if (tags.sigflag as SigFlag) {\n\t//     if (tags.sigflag[0]==='SIG_INPUT') {\n\n\t//     }\n\t//     else if(tags.sigflag[0]==='SIG_ALL') {\n\n\t//     }\n\t//     else {\n\t//         throw new Error(\"Unknown sigflag\");\n\t//     }\n\t// }\n\t// if (tags.n_sigs) {\n\t//     if (tags.pubkeys) {\n\n\t//     }\n\t// }\n\n\treturn schnorr.verify(\n\t\tproof.witness.signatures[0],\n\t\tsha256(new TextDecoder().decode(proof.secret)),\n\t\tparsedSecret[1].data\n\t);\n};\n\nexport const verifyP2PKSigOutput = (output: BlindedMessage, publicKey: string): boolean => {\n\tif (!output.witness) {\n\t\tthrow new Error('could not verify signature, no witness provided');\n\t}\n\treturn schnorr.verify(output.witness.signatures[0], sha256(output.B_.toHex(true)), publicKey);\n};\n"],"names":["verifyP2PKSig","proof","parsedSecret","parseSecret","schnorr","sha256","verifyP2PKSigOutput","output","publicKey"],"mappings":";;;AAMa,MAAAA,IAAgB,CAACC,MAAiB;AAC1C,MAAA,CAACA,EAAM;AACJ,UAAA,IAAI,MAAM,iDAAiD;AAE5D,QAAAC,IAAeC,EAAYF,EAAM,MAAM;AA6B7C,SAAOG,EAAQ;AAAA,IACdH,EAAM,QAAQ,WAAW,CAAC;AAAA,IAC1BI,EAAO,IAAI,cAAc,OAAOJ,EAAM,MAAM,CAAC;AAAA,IAC7CC,EAAa,CAAC,EAAE;AAAA,EACjB;AACD,GAEaI,IAAsB,CAACC,GAAwBC,MAA+B;AACtF,MAAA,CAACD,EAAO;AACL,UAAA,IAAI,MAAM,iDAAiD;AAElE,SAAOH,EAAQ,OAAOG,EAAO,QAAQ,WAAW,CAAC,GAAGF,EAAOE,EAAO,GAAG,MAAM,EAAI,CAAC,GAAGC,CAAS;AAC7F;"}