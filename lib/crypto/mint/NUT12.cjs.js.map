{"version":3,"file":"NUT12.cjs.js","sources":["../../../src/crypto/mint/NUT12.ts"],"sourcesContent":["import { hash_e, createRandomPrivateKey, DLEQ } from '../common/index.js';\nimport { ProjPointType } from '@noble/curves/abstract/weierstrass';\nimport { bytesToHex, numberToBytesBE } from '@noble/curves/abstract/utils';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { bytesToNumber, hexToNumber } from '../util/utils.js';\n\n/**\n * !!! WARNING !!! Not recommended for production use, due to non-constant time operations\n * See: https://github.com/cashubtc/cashu-crypto-ts/pull/2 for more details\n * See: https://en.wikipedia.org/wiki/Timing_attack for information about timing attacks.\n */\nexport const createDLEQProof = (B_: ProjPointType<bigint>, a: Uint8Array): DLEQ => {\n\tconst r = bytesToHex(createRandomPrivateKey()); // r <- random\n\tconst R_1 = secp256k1.ProjectivePoint.fromPrivateKey(r); // R1 = rG\n\tconst R_2 = B_.multiply(hexToNumber(r)); // R2 = rB_\n\tconst C_ = B_.multiply(bytesToNumber(a)); // C_ = aB_\n\tconst A = secp256k1.ProjectivePoint.fromPrivateKey(bytesToHex(a)); // A = aG\n\tconst e = hash_e([R_1, R_2, A, C_]); // e = hash(R1, R2, A, C_)\n\tconst n_r = hexToNumber(r);\n\tconst n_e = bytesToNumber(e);\n\tconst n_a = bytesToNumber(a);\n\t// WARNING: NON-CONSTANT TIME OPERATIONS?\n\tconst s = numberToBytesBE((n_r + n_e * n_a) % secp256k1.CURVE.n, 32); // (r + ea) mod n\n\treturn { s, e };\n};\n"],"names":["createDLEQProof","B_","a","r","bytesToHex","createRandomPrivateKey","R_1","secp256k1","R_2","hexToNumber","C_","bytesToNumber","A","e","hash_e","n_r","n_e","n_a","numberToBytesBE"],"mappings":"+NAWaA,EAAkB,CAACC,EAA2BC,IAAwB,CAC5E,MAAAC,EAAIC,aAAWC,EAAAA,wBAAwB,EACvCC,EAAMC,EAAA,UAAU,gBAAgB,eAAeJ,CAAC,EAChDK,EAAMP,EAAG,SAASQ,EAAA,YAAYN,CAAC,CAAC,EAChCO,EAAKT,EAAG,SAASU,EAAA,cAAcT,CAAC,CAAC,EACjCU,EAAIL,EAAAA,UAAU,gBAAgB,eAAeH,EAAAA,WAAWF,CAAC,CAAC,EAC1DW,EAAIC,EAAAA,OAAO,CAACR,EAAKE,EAAKI,EAAGF,CAAE,CAAC,EAC5BK,EAAMN,cAAYN,CAAC,EACnBa,EAAML,gBAAcE,CAAC,EACrBI,EAAMN,gBAAcT,CAAC,EAGpB,MAAA,CAAE,EADCgB,mBAAiBH,EAAMC,EAAMC,GAAOV,YAAU,MAAM,EAAG,EAAE,EACvD,EAAAM,CAAE,CACf"}