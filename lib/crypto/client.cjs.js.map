{"version":3,"file":"client.cjs.js","sources":["../../src/crypto/client/index.ts"],"sourcesContent":["import { ProjPointType } from '@noble/curves/abstract/weierstrass';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { bytesToNumber } from '../util/utils.js';\nimport type {\n\tBlindSignature,\n\tProof,\n\tSerializedBlindedMessage,\n\tSerializedProof\n} from '../common/index.js';\nimport { hashToCurve, pointFromHex } from '../common/index.js';\nimport { Witness } from '../common/index';\nimport { PrivKey } from '@noble/curves/abstract/utils';\nimport { getSignedOutput } from './NUT11.js';\n\nexport type BlindedMessage = {\n\tB_: ProjPointType<bigint>;\n\tr: bigint;\n\tsecret: Uint8Array;\n\twitness?: Witness;\n};\n\nexport function createRandomBlindedMessage(privateKey?: PrivKey): BlindedMessage {\n\treturn blindMessage(\n\t\trandomBytes(32),\n\t\tbytesToNumber(secp256k1.utils.randomPrivateKey()),\n\t\tprivateKey\n\t);\n}\n\nexport function blindMessage(secret: Uint8Array, r?: bigint, privateKey?: PrivKey): BlindedMessage {\n\tconst Y = hashToCurve(secret);\n\tif (!r) {\n\t\tr = bytesToNumber(secp256k1.utils.randomPrivateKey());\n\t}\n\tconst rG = secp256k1.ProjectivePoint.BASE.multiply(r);\n\tconst B_ = Y.add(rG);\n\tif (privateKey !== undefined) {\n\t\treturn getSignedOutput({ B_, r, secret }, privateKey);\n\t}\n\treturn { B_, r, secret };\n}\n\nexport function unblindSignature(\n\tC_: ProjPointType<bigint>,\n\tr: bigint,\n\tA: ProjPointType<bigint>\n): ProjPointType<bigint> {\n\tconst C = C_.subtract(A.multiply(r));\n\treturn C;\n}\n\nexport function constructProofFromPromise(\n\tpromise: BlindSignature,\n\tr: bigint,\n\tsecret: Uint8Array,\n\tkey: ProjPointType<bigint>\n): Proof {\n\tconst A = key;\n\tconst C = unblindSignature(promise.C_, r, A);\n\tconst proof = {\n\t\tid: promise.id,\n\t\tamount: promise.amount,\n\t\tsecret,\n\t\tC\n\t};\n\treturn proof;\n}\n\nexport const serializeProof = (proof: Proof): SerializedProof => {\n\treturn {\n\t\tamount: proof.amount,\n\t\tC: proof.C.toHex(true),\n\t\tid: proof.id,\n\t\tsecret: new TextDecoder().decode(proof.secret),\n\t\twitness: JSON.stringify(proof.witness)\n\t};\n};\n\nexport const deserializeProof = (proof: SerializedProof): Proof => {\n\treturn {\n\t\tamount: proof.amount,\n\t\tC: pointFromHex(proof.C),\n\t\tid: proof.id,\n\t\tsecret: new TextEncoder().encode(proof.secret),\n\t\twitness: proof.witness ? JSON.parse(proof.witness) : undefined\n\t};\n};\nexport const serializeBlindedMessage = (\n\tbm: BlindedMessage,\n\tamount: number\n): SerializedBlindedMessage => {\n\treturn {\n\t\tB_: bm.B_.toHex(true),\n\t\tamount: amount\n\t};\n};\n"],"names":["createRandomBlindedMessage","privateKey","blindMessage","randomBytes","bytesToNumber","secp256k1","secret","r","Y","hashToCurve","rG","B_","getSignedOutput","unblindSignature","C_","A","constructProofFromPromise","promise","key","C","serializeProof","proof","deserializeProof","pointFromHex","serializeBlindedMessage","bm","amount"],"mappings":"uPAsBO,SAASA,EAA2BC,EAAsC,CACzE,OAAAC,EACNC,EAAAA,YAAY,EAAE,EACdC,EAAAA,cAAcC,EAAA,UAAU,MAAM,kBAAkB,EAChDJ,CACD,CACD,CAEgB,SAAAC,EAAaI,EAAoBC,EAAYN,EAAsC,CAC5F,MAAAO,EAAIC,cAAYH,CAAM,EACvBC,IACJA,EAAIH,EAAAA,cAAcC,EAAAA,UAAU,MAAM,iBAAA,CAAkB,GAErD,MAAMK,EAAKL,EAAAA,UAAU,gBAAgB,KAAK,SAASE,CAAC,EAC9CI,EAAKH,EAAE,IAAIE,CAAE,EACnB,OAAIT,IAAe,OACXW,EAAAA,gBAAgB,CAAE,GAAAD,EAAI,EAAAJ,EAAG,OAAAD,CAAA,EAAUL,CAAU,EAE9C,CAAE,GAAAU,EAAI,EAAAJ,EAAG,OAAAD,CAAO,CACxB,CAEgB,SAAAO,EACfC,EACAP,EACAQ,EACwB,CAEjB,OADGD,EAAG,SAASC,EAAE,SAASR,CAAC,CAAC,CAEpC,CAEO,SAASS,EACfC,EACAV,EACAD,EACAY,EACQ,CACR,MAAMH,EAAIG,EACJC,EAAIN,EAAiBI,EAAQ,GAAIV,EAAGQ,CAAC,EAOpC,MANO,CACb,GAAIE,EAAQ,GACZ,OAAQA,EAAQ,OAChB,OAAAX,EACA,EAAAa,CACD,CAED,CAEa,MAAAC,EAAkBC,IACvB,CACN,OAAQA,EAAM,OACd,EAAGA,EAAM,EAAE,MAAM,EAAI,EACrB,GAAIA,EAAM,GACV,OAAQ,IAAI,YAAA,EAAc,OAAOA,EAAM,MAAM,EAC7C,QAAS,KAAK,UAAUA,EAAM,OAAO,CACtC,GAGYC,EAAoBD,IACzB,CACN,OAAQA,EAAM,OACd,EAAGE,EAAAA,aAAaF,EAAM,CAAC,EACvB,GAAIA,EAAM,GACV,OAAQ,IAAI,YAAA,EAAc,OAAOA,EAAM,MAAM,EAC7C,QAASA,EAAM,QAAU,KAAK,MAAMA,EAAM,OAAO,EAAI,MACtD,GAEYG,EAA0B,CACtCC,EACAC,KAEO,CACN,GAAID,EAAG,GAAG,MAAM,EAAI,EACpB,OAAAC,CACD"}