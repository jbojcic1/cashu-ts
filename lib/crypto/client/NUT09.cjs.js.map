{"version":3,"file":"NUT09.cjs.js","sources":["../../../src/crypto/client/NUT09.ts"],"sourcesContent":["import { HDKey } from '@scure/bip32';\nimport { getKeysetIdInt } from '../common/index.js';\n\nconst STANDARD_DERIVATION_PATH = `m/129372'/0'`;\n\nenum DerivationType {\n\tSECRET = 0,\n\tBLINDING_FACTOR = 1\n}\n\nexport const deriveSecret = (seed: Uint8Array, keysetId: string, counter: number): Uint8Array => {\n\treturn derive(seed, keysetId, counter, DerivationType.SECRET);\n};\n\nexport const deriveBlindingFactor = (\n\tseed: Uint8Array,\n\tkeysetId: string,\n\tcounter: number\n): Uint8Array => {\n\treturn derive(seed, keysetId, counter, DerivationType.BLINDING_FACTOR);\n};\n\nconst derive = (\n\tseed: Uint8Array,\n\tkeysetId: string,\n\tcounter: number,\n\tsecretOrBlinding: DerivationType\n): Uint8Array => {\n\tconst hdkey = HDKey.fromMasterSeed(seed);\n\tconst keysetIdInt = getKeysetIdInt(keysetId);\n\tconst derivationPath = `${STANDARD_DERIVATION_PATH}/${keysetIdInt}'/${counter}'/${secretOrBlinding}`;\n\tconst derived = hdkey.derive(derivationPath);\n\tif (derived.privateKey === null) {\n\t\tthrow new Error('Could not derive private key');\n\t}\n\treturn derived.privateKey;\n};\n"],"names":["STANDARD_DERIVATION_PATH","deriveSecret","seed","keysetId","counter","derive","deriveBlindingFactor","secretOrBlinding","hdkey","HDKey","keysetIdInt","getKeysetIdInt","derivationPath","derived"],"mappings":"8IAGMA,EAA2B,eAOpBC,EAAe,CAACC,EAAkBC,EAAkBC,IACzDC,EAAOH,EAAMC,EAAUC,EAAS,CAAqB,EAGhDE,EAAuB,CACnCJ,EACAC,EACAC,IAEOC,EAAOH,EAAMC,EAAUC,EAAS,CAA8B,EAGhEC,EAAS,CACdH,EACAC,EACAC,EACAG,IACgB,CACV,MAAAC,EAAQC,EAAAA,MAAM,eAAeP,CAAI,EACjCQ,EAAcC,iBAAeR,CAAQ,EACrCS,EAAiB,GAAGZ,CAAwB,IAAIU,CAAW,KAAKN,CAAO,KAAKG,CAAgB,GAC5FM,EAAUL,EAAM,OAAOI,CAAc,EACvC,GAAAC,EAAQ,aAAe,KACpB,MAAA,IAAI,MAAM,8BAA8B,EAE/C,OAAOA,EAAQ,UAChB"}