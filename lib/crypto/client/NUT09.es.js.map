{"version":3,"file":"NUT09.es.js","sources":["../../../src/crypto/client/NUT09.ts"],"sourcesContent":["import { HDKey } from '@scure/bip32';\nimport { getKeysetIdInt } from '../common/index.js';\n\nconst STANDARD_DERIVATION_PATH = `m/129372'/0'`;\n\nenum DerivationType {\n\tSECRET = 0,\n\tBLINDING_FACTOR = 1\n}\n\nexport const deriveSecret = (seed: Uint8Array, keysetId: string, counter: number): Uint8Array => {\n\treturn derive(seed, keysetId, counter, DerivationType.SECRET);\n};\n\nexport const deriveBlindingFactor = (\n\tseed: Uint8Array,\n\tkeysetId: string,\n\tcounter: number\n): Uint8Array => {\n\treturn derive(seed, keysetId, counter, DerivationType.BLINDING_FACTOR);\n};\n\nconst derive = (\n\tseed: Uint8Array,\n\tkeysetId: string,\n\tcounter: number,\n\tsecretOrBlinding: DerivationType\n): Uint8Array => {\n\tconst hdkey = HDKey.fromMasterSeed(seed);\n\tconst keysetIdInt = getKeysetIdInt(keysetId);\n\tconst derivationPath = `${STANDARD_DERIVATION_PATH}/${keysetIdInt}'/${counter}'/${secretOrBlinding}`;\n\tconst derived = hdkey.derive(derivationPath);\n\tif (derived.privateKey === null) {\n\t\tthrow new Error('Could not derive private key');\n\t}\n\treturn derived.privateKey;\n};\n"],"names":["STANDARD_DERIVATION_PATH","deriveSecret","seed","keysetId","counter","derive","deriveBlindingFactor","secretOrBlinding","hdkey","HDKey","keysetIdInt","getKeysetIdInt","derivationPath","derived"],"mappings":";;AAGA,MAAMA,IAA2B,gBAOpBC,IAAe,CAACC,GAAkBC,GAAkBC,MACzDC;AAAA,EAAOH;AAAA,EAAMC;AAAA,EAAUC;AAAA,EAAS;AAAA;AAAqB,GAGhDE,IAAuB,CACnCJ,GACAC,GACAC,MAEOC;AAAA,EAAOH;AAAA,EAAMC;AAAA,EAAUC;AAAA,EAAS;AAAA;AAA8B,GAGhEC,IAAS,CACdH,GACAC,GACAC,GACAG,MACgB;AACV,QAAAC,IAAQC,EAAM,eAAeP,CAAI,GACjCQ,IAAcC,EAAeR,CAAQ,GACrCS,IAAiB,GAAGZ,CAAwB,IAAIU,CAAW,KAAKN,CAAO,KAAKG,CAAgB,IAC5FM,IAAUL,EAAM,OAAOI,CAAc;AACvC,MAAAC,EAAQ,eAAe;AACpB,UAAA,IAAI,MAAM,8BAA8B;AAE/C,SAAOA,EAAQ;AAChB;"}