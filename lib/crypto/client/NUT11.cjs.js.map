{"version":3,"file":"NUT11.cjs.js","sources":["../../../src/crypto/client/NUT11.ts"],"sourcesContent":["import { PrivKey, bytesToHex, hexToBytes } from '@noble/curves/abstract/utils';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { schnorr } from '@noble/curves/secp256k1';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { parseSecret } from '../common/NUT11.js';\nimport { Proof, Secret } from '../common/index.js';\nimport { BlindedMessage } from './index.js';\n\nexport const createP2PKsecret = (pubkey: string): Uint8Array => {\n\tconst newSecret: Secret = [\n\t\t'P2PK',\n\t\t{\n\t\t\tnonce: bytesToHex(randomBytes(32)),\n\t\t\tdata: pubkey\n\t\t}\n\t];\n\tconst parsed = JSON.stringify(newSecret);\n\treturn new TextEncoder().encode(parsed);\n};\n\nexport const signP2PKsecret = (secret: Uint8Array, privateKey: PrivKey) => {\n\tconst msghash = sha256(new TextDecoder().decode(secret));\n\tconst sig = schnorr.sign(msghash, privateKey);\n\treturn sig;\n};\n\nexport const signBlindedMessage = (B_: string, privateKey: PrivKey): Uint8Array => {\n\tconst msgHash = sha256(B_);\n\tconst sig = schnorr.sign(msgHash, privateKey);\n\treturn sig;\n};\n\nexport const getSignedProofs = (\n\tproofs: Array<Proof>,\n\tprivateKey: string | string[]\n): Array<Proof> => {\n\tlet keypairs: Array<{ priv: string; pub: string }> = [];\n\tlet pk = '';\n\n\tif (privateKey instanceof Array) {\n\t\tfor (const k of privateKey) {\n\t\t\tkeypairs.push({ priv: k, pub: bytesToHex(schnorr.getPublicKey(k)) });\n\t\t}\n\t} else {\n\t\tpk = privateKey;\n\t}\n\n\treturn proofs.map((p) => {\n\t\ttry {\n\t\t\tconst parsed: Secret = parseSecret(p.secret);\n\t\t\tif (parsed[0] !== 'P2PK') {\n\t\t\t\tthrow new Error('unknown secret type');\n\t\t\t}\n\t\t\tif (keypairs.length) {\n\t\t\t\tconst matchingKey = keypairs.find((pair) => parsed[1].data === pair.pub)?.priv;\n\t\t\t\tif (!matchingKey) {\n\t\t\t\t\tthrow new Error('no matching key found');\n\t\t\t\t} else {\n\t\t\t\t\tpk = matchingKey;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn getSignedProof(p, hexToBytes(pk));\n\t\t} catch (error) {\n\t\t\treturn p;\n\t\t}\n\t});\n};\n\nexport const getSignedOutput = (output: BlindedMessage, privateKey: PrivKey): BlindedMessage => {\n\tconst B_ = output.B_.toHex(true);\n\tconst signature = signBlindedMessage(B_, privateKey);\n\toutput.witness = { signatures: [bytesToHex(signature)] };\n\treturn output;\n};\n\nexport const getSignedOutputs = (\n\toutputs: Array<BlindedMessage>,\n\tprivateKey: string\n): Array<BlindedMessage> => {\n\treturn outputs.map((o) => getSignedOutput(o, privateKey));\n};\n\nexport const getSignedProof = (proof: Proof, privateKey: PrivKey): Proof => {\n\tif (!proof.witness) {\n\t\tproof.witness = {\n\t\t\tsignatures: [bytesToHex(signP2PKsecret(proof.secret, privateKey))]\n\t\t};\n\t}\n\treturn proof;\n};\n"],"names":["createP2PKsecret","pubkey","newSecret","bytesToHex","randomBytes","parsed","signP2PKsecret","secret","privateKey","msghash","sha256","schnorr","signBlindedMessage","B_","msgHash","getSignedProofs","proofs","keypairs","pk","k","p","parseSecret","matchingKey","pair","getSignedProof","hexToBytes","getSignedOutput","output","signature","getSignedOutputs","outputs","o","proof"],"mappings":"4QAQaA,EAAoBC,GAA+B,CAC/D,MAAMC,EAAoB,CACzB,OACA,CACC,MAAOC,EAAA,WAAWC,cAAY,EAAE,CAAC,EACjC,KAAMH,CAAA,CAER,EACMI,EAAS,KAAK,UAAUH,CAAS,EACvC,OAAO,IAAI,YAAA,EAAc,OAAOG,CAAM,CACvC,EAEaC,EAAiB,CAACC,EAAoBC,IAAwB,CAC1E,MAAMC,EAAUC,EAAAA,OAAO,IAAI,cAAc,OAAOH,CAAM,CAAC,EAEhD,OADKI,EAAA,QAAQ,KAAKF,EAASD,CAAU,CAE7C,EAEaI,EAAqB,CAACC,EAAYL,IAAoC,CAC5E,MAAAM,EAAUJ,SAAOG,CAAE,EAElB,OADKF,EAAA,QAAQ,KAAKG,EAASN,CAAU,CAE7C,EAEaO,EAAkB,CAC9BC,EACAR,IACkB,CAClB,IAAIS,EAAiD,CAAC,EAClDC,EAAK,GAET,GAAIV,aAAsB,MACzB,UAAWW,KAAKX,EACNS,EAAA,KAAK,CAAE,KAAME,EAAG,IAAKhB,EAAW,WAAAQ,UAAQ,aAAaQ,CAAC,CAAC,CAAA,CAAG,OAG/DD,EAAAV,EAGC,OAAAQ,EAAO,IAAKI,GAAM,CACpB,GAAA,CACG,MAAAf,EAAiBgB,EAAAA,YAAYD,EAAE,MAAM,EACvC,GAAAf,EAAO,CAAC,IAAM,OACX,MAAA,IAAI,MAAM,qBAAqB,EAEtC,GAAIY,EAAS,OAAQ,CACd,MAAAK,EAAcL,EAAS,KAAMM,GAASlB,EAAO,CAAC,EAAE,OAASkB,EAAK,GAAG,GAAG,KAC1E,GAAKD,EAGCJ,EAAAI,MAFC,OAAA,IAAI,MAAM,uBAAuB,CAGxC,CAED,OAAOE,EAAeJ,EAAGK,EAAW,WAAAP,CAAE,CAAC,OACxB,CACR,OAAAE,CAAA,CACR,CACA,CACF,EAEaM,EAAkB,CAACC,EAAwBnB,IAAwC,CAC/F,MAAMK,EAAKc,EAAO,GAAG,MAAM,EAAI,EACzBC,EAAYhB,EAAmBC,EAAIL,CAAU,EACnD,OAAAmB,EAAO,QAAU,CAAE,WAAY,CAACxB,EAAW,WAAAyB,CAAS,CAAC,CAAE,EAChDD,CACR,EAEaE,EAAmB,CAC/BC,EACAtB,IAEOsB,EAAQ,IAAKC,GAAML,EAAgBK,EAAGvB,CAAU,CAAC,EAG5CgB,EAAiB,CAACQ,EAAcxB,KACvCwB,EAAM,UACVA,EAAM,QAAU,CACf,WAAY,CAAC7B,EAAAA,WAAWG,EAAe0B,EAAM,OAAQxB,CAAU,CAAC,CAAC,CAClE,GAEMwB"}