{"version":3,"file":"NUT12.es.js","sources":["../../../src/crypto/client/NUT12.ts"],"sourcesContent":["import { DLEQ, hash_e, hashToCurve } from '../common/index.js';\nimport { ProjPointType } from '@noble/curves/abstract/weierstrass';\nimport { bytesToHex } from '@noble/curves/abstract/utils';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { bytesToNumber } from '../util/utils.js';\n\nfunction arraysEqual(arr1: any, arr2: any) {\n\tif (arr1.length !== arr2.length) return false;\n\tfor (let i = 0; i < arr1.length; i++) {\n\t\tif (arr1[i] !== arr2[i]) return false;\n\t}\n\treturn true;\n}\n\nexport const verifyDLEQProof = (\n\tdleq: DLEQ,\n\tB_: ProjPointType<bigint>,\n\tC_: ProjPointType<bigint>,\n\tA: ProjPointType<bigint>\n) => {\n\tconst sG = secp256k1.ProjectivePoint.fromPrivateKey(bytesToHex(dleq.s));\n\tconst eA = A.multiply(bytesToNumber(dleq.e));\n\tconst sB_ = B_.multiply(bytesToNumber(dleq.s));\n\tconst eC_ = C_.multiply(bytesToNumber(dleq.e));\n\tconst R_1 = sG.subtract(eA); // R1 = sG - eA\n\tconst R_2 = sB_.subtract(eC_); // R2 = sB' - eC'\n\tconst hash = hash_e([R_1, R_2, A, C_]); // e == hash(R1, R2, A, C')\n\treturn arraysEqual(hash, dleq.e);\n};\n\nexport const verifyDLEQProof_reblind = (\n\tsecret: Uint8Array, // secret\n\tdleq: DLEQ,\n\tC: ProjPointType<bigint>, // unblinded e-cash signature point\n\tA: ProjPointType<bigint> // mint public key point\n) => {\n\tif (dleq.r === undefined) throw new Error('verifyDLEQProof_reblind: Undefined blinding factor');\n\tconst Y = hashToCurve(secret);\n\tconst C_ = C.add(A.multiply(dleq.r)); // Re-blind the e-cash signature\n\tconst bG = secp256k1.ProjectivePoint.fromPrivateKey(dleq.r);\n\tconst B_ = Y.add(bG); // Re-blind the message\n\treturn verifyDLEQProof(dleq, B_, C_, A);\n};\n"],"names":["arraysEqual","arr1","arr2","i","verifyDLEQProof","dleq","B_","C_","A","sG","secp256k1","bytesToHex","eA","bytesToNumber","sB_","eC_","R_1","R_2","hash","hash_e","verifyDLEQProof_reblind","secret","C","Y","hashToCurve","bG"],"mappings":";;;;AAMA,SAASA,EAAYC,GAAWC,GAAW;AAC1C,MAAID,EAAK,WAAWC,EAAK,OAAe,QAAA;AACxC,WAASC,IAAI,GAAGA,IAAIF,EAAK,QAAQE;AAChC,QAAIF,EAAKE,CAAC,MAAMD,EAAKC,CAAC,EAAU,QAAA;AAE1B,SAAA;AACR;AAEO,MAAMC,IAAkB,CAC9BC,GACAC,GACAC,GACAC,MACI;AACJ,QAAMC,IAAKC,EAAU,gBAAgB,eAAeC,EAAWN,EAAK,CAAC,CAAC,GAChEO,IAAKJ,EAAE,SAASK,EAAcR,EAAK,CAAC,CAAC,GACrCS,IAAMR,EAAG,SAASO,EAAcR,EAAK,CAAC,CAAC,GACvCU,IAAMR,EAAG,SAASM,EAAcR,EAAK,CAAC,CAAC,GACvCW,IAAMP,EAAG,SAASG,CAAE,GACpBK,IAAMH,EAAI,SAASC,CAAG,GACtBG,IAAOC,EAAO,CAACH,GAAKC,GAAKT,GAAGD,CAAE,CAAC;AAC9B,SAAAP,EAAYkB,GAAMb,EAAK,CAAC;AAChC,GAEae,IAA0B,CACtCC,GACAhB,GACAiB,GACAd,MACI;AACJ,MAAIH,EAAK,MAAM,OAAiB,OAAA,IAAI,MAAM,oDAAoD;AACxF,QAAAkB,IAAIC,EAAYH,CAAM,GACtBd,IAAKe,EAAE,IAAId,EAAE,SAASH,EAAK,CAAC,CAAC,GAC7BoB,IAAKf,EAAU,gBAAgB,eAAeL,EAAK,CAAC,GACpDC,IAAKiB,EAAE,IAAIE,CAAE;AACnB,SAAOrB,EAAgBC,GAAMC,GAAIC,GAAIC,CAAC;AACvC;"}