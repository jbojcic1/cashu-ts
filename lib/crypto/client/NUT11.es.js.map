{"version":3,"file":"NUT11.es.js","sources":["../../../src/crypto/client/NUT11.ts"],"sourcesContent":["import { PrivKey, bytesToHex, hexToBytes } from '@noble/curves/abstract/utils';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { schnorr } from '@noble/curves/secp256k1';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { parseSecret } from '../common/NUT11.js';\nimport { Proof, Secret } from '../common/index.js';\nimport { BlindedMessage } from './index.js';\n\nexport const createP2PKsecret = (pubkey: string): Uint8Array => {\n\tconst newSecret: Secret = [\n\t\t'P2PK',\n\t\t{\n\t\t\tnonce: bytesToHex(randomBytes(32)),\n\t\t\tdata: pubkey\n\t\t}\n\t];\n\tconst parsed = JSON.stringify(newSecret);\n\treturn new TextEncoder().encode(parsed);\n};\n\nexport const signP2PKsecret = (secret: Uint8Array, privateKey: PrivKey) => {\n\tconst msghash = sha256(new TextDecoder().decode(secret));\n\tconst sig = schnorr.sign(msghash, privateKey);\n\treturn sig;\n};\n\nexport const signBlindedMessage = (B_: string, privateKey: PrivKey): Uint8Array => {\n\tconst msgHash = sha256(B_);\n\tconst sig = schnorr.sign(msgHash, privateKey);\n\treturn sig;\n};\n\nexport const getSignedProofs = (\n\tproofs: Array<Proof>,\n\tprivateKey: string | string[]\n): Array<Proof> => {\n\tlet keypairs: Array<{ priv: string; pub: string }> = [];\n\tlet pk = '';\n\n\tif (privateKey instanceof Array) {\n\t\tfor (const k of privateKey) {\n\t\t\tkeypairs.push({ priv: k, pub: bytesToHex(schnorr.getPublicKey(k)) });\n\t\t}\n\t} else {\n\t\tpk = privateKey;\n\t}\n\n\treturn proofs.map((p) => {\n\t\ttry {\n\t\t\tconst parsed: Secret = parseSecret(p.secret);\n\t\t\tif (parsed[0] !== 'P2PK') {\n\t\t\t\tthrow new Error('unknown secret type');\n\t\t\t}\n\t\t\tif (keypairs.length) {\n\t\t\t\tconst matchingKey = keypairs.find((pair) => parsed[1].data === pair.pub)?.priv;\n\t\t\t\tif (!matchingKey) {\n\t\t\t\t\tthrow new Error('no matching key found');\n\t\t\t\t} else {\n\t\t\t\t\tpk = matchingKey;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn getSignedProof(p, hexToBytes(pk));\n\t\t} catch (error) {\n\t\t\treturn p;\n\t\t}\n\t});\n};\n\nexport const getSignedOutput = (output: BlindedMessage, privateKey: PrivKey): BlindedMessage => {\n\tconst B_ = output.B_.toHex(true);\n\tconst signature = signBlindedMessage(B_, privateKey);\n\toutput.witness = { signatures: [bytesToHex(signature)] };\n\treturn output;\n};\n\nexport const getSignedOutputs = (\n\toutputs: Array<BlindedMessage>,\n\tprivateKey: string\n): Array<BlindedMessage> => {\n\treturn outputs.map((o) => getSignedOutput(o, privateKey));\n};\n\nexport const getSignedProof = (proof: Proof, privateKey: PrivKey): Proof => {\n\tif (!proof.witness) {\n\t\tproof.witness = {\n\t\t\tsignatures: [bytesToHex(signP2PKsecret(proof.secret, privateKey))]\n\t\t};\n\t}\n\treturn proof;\n};\n"],"names":["createP2PKsecret","pubkey","newSecret","bytesToHex","randomBytes","parsed","signP2PKsecret","secret","privateKey","msghash","sha256","schnorr","signBlindedMessage","B_","msgHash","getSignedProofs","proofs","keypairs","pk","k","p","parseSecret","matchingKey","pair","getSignedProof","hexToBytes","getSignedOutput","output","signature","getSignedOutputs","outputs","o","proof"],"mappings":";;;;;AAQa,MAAAA,IAAmB,CAACC,MAA+B;AAC/D,QAAMC,IAAoB;AAAA,IACzB;AAAA,IACA;AAAA,MACC,OAAOC,EAAWC,EAAY,EAAE,CAAC;AAAA,MACjC,MAAMH;AAAA,IAAA;AAAA,EAER,GACMI,IAAS,KAAK,UAAUH,CAAS;AACvC,SAAO,IAAI,YAAA,EAAc,OAAOG,CAAM;AACvC,GAEaC,IAAiB,CAACC,GAAoBC,MAAwB;AAC1E,QAAMC,IAAUC,EAAO,IAAI,cAAc,OAAOH,CAAM,CAAC;AAEhD,SADKI,EAAQ,KAAKF,GAASD,CAAU;AAE7C,GAEaI,IAAqB,CAACC,GAAYL,MAAoC;AAC5E,QAAAM,IAAUJ,EAAOG,CAAE;AAElB,SADKF,EAAQ,KAAKG,GAASN,CAAU;AAE7C,GAEaO,IAAkB,CAC9BC,GACAR,MACkB;AAClB,MAAIS,IAAiD,CAAC,GAClDC,IAAK;AAET,MAAIV,aAAsB;AACzB,eAAWW,KAAKX;AACN,MAAAS,EAAA,KAAK,EAAE,MAAME,GAAG,KAAKhB,EAAWQ,EAAQ,aAAaQ,CAAC,CAAC,EAAA,CAAG;AAAA;AAG/D,IAAAD,IAAAV;AAGC,SAAAQ,EAAO,IAAI,CAACI,MAAM;AACpB,QAAA;AACG,YAAAf,IAAiBgB,EAAYD,EAAE,MAAM;AACvC,UAAAf,EAAO,CAAC,MAAM;AACX,cAAA,IAAI,MAAM,qBAAqB;AAEtC,UAAIY,EAAS,QAAQ;AACd,cAAAK,IAAcL,EAAS,KAAK,CAACM,MAASlB,EAAO,CAAC,EAAE,SAASkB,EAAK,GAAG,GAAG;AAC1E,YAAKD;AAGC,UAAAJ,IAAAI;AAAA;AAFC,gBAAA,IAAI,MAAM,uBAAuB;AAAA,MAGxC;AAED,aAAOE,EAAeJ,GAAGK,EAAWP,CAAE,CAAC;AAAA,YACxB;AACR,aAAAE;AAAA,IAAA;AAAA,EACR,CACA;AACF,GAEaM,IAAkB,CAACC,GAAwBnB,MAAwC;AAC/F,QAAMK,IAAKc,EAAO,GAAG,MAAM,EAAI,GACzBC,IAAYhB,EAAmBC,GAAIL,CAAU;AACnD,SAAAmB,EAAO,UAAU,EAAE,YAAY,CAACxB,EAAWyB,CAAS,CAAC,EAAE,GAChDD;AACR,GAEaE,IAAmB,CAC/BC,GACAtB,MAEOsB,EAAQ,IAAI,CAACC,MAAML,EAAgBK,GAAGvB,CAAU,CAAC,GAG5CgB,IAAiB,CAACQ,GAAcxB,OACvCwB,EAAM,YACVA,EAAM,UAAU;AAAA,EACf,YAAY,CAAC7B,EAAWG,EAAe0B,EAAM,QAAQxB,CAAU,CAAC,CAAC;AAClE,IAEMwB;"}