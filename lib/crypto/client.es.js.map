{"version":3,"file":"client.es.js","sources":["../../src/crypto/client/index.ts"],"sourcesContent":["import { ProjPointType } from '@noble/curves/abstract/weierstrass';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { bytesToNumber } from '../util/utils.js';\nimport type {\n\tBlindSignature,\n\tProof,\n\tSerializedBlindedMessage,\n\tSerializedProof\n} from '../common/index.js';\nimport { hashToCurve, pointFromHex } from '../common/index.js';\nimport { Witness } from '../common/index';\nimport { PrivKey } from '@noble/curves/abstract/utils';\nimport { getSignedOutput } from './NUT11.js';\n\nexport type BlindedMessage = {\n\tB_: ProjPointType<bigint>;\n\tr: bigint;\n\tsecret: Uint8Array;\n\twitness?: Witness;\n};\n\nexport function createRandomBlindedMessage(privateKey?: PrivKey): BlindedMessage {\n\treturn blindMessage(\n\t\trandomBytes(32),\n\t\tbytesToNumber(secp256k1.utils.randomPrivateKey()),\n\t\tprivateKey\n\t);\n}\n\nexport function blindMessage(secret: Uint8Array, r?: bigint, privateKey?: PrivKey): BlindedMessage {\n\tconst Y = hashToCurve(secret);\n\tif (!r) {\n\t\tr = bytesToNumber(secp256k1.utils.randomPrivateKey());\n\t}\n\tconst rG = secp256k1.ProjectivePoint.BASE.multiply(r);\n\tconst B_ = Y.add(rG);\n\tif (privateKey !== undefined) {\n\t\treturn getSignedOutput({ B_, r, secret }, privateKey);\n\t}\n\treturn { B_, r, secret };\n}\n\nexport function unblindSignature(\n\tC_: ProjPointType<bigint>,\n\tr: bigint,\n\tA: ProjPointType<bigint>\n): ProjPointType<bigint> {\n\tconst C = C_.subtract(A.multiply(r));\n\treturn C;\n}\n\nexport function constructProofFromPromise(\n\tpromise: BlindSignature,\n\tr: bigint,\n\tsecret: Uint8Array,\n\tkey: ProjPointType<bigint>\n): Proof {\n\tconst A = key;\n\tconst C = unblindSignature(promise.C_, r, A);\n\tconst proof = {\n\t\tid: promise.id,\n\t\tamount: promise.amount,\n\t\tsecret,\n\t\tC\n\t};\n\treturn proof;\n}\n\nexport const serializeProof = (proof: Proof): SerializedProof => {\n\treturn {\n\t\tamount: proof.amount,\n\t\tC: proof.C.toHex(true),\n\t\tid: proof.id,\n\t\tsecret: new TextDecoder().decode(proof.secret),\n\t\twitness: JSON.stringify(proof.witness)\n\t};\n};\n\nexport const deserializeProof = (proof: SerializedProof): Proof => {\n\treturn {\n\t\tamount: proof.amount,\n\t\tC: pointFromHex(proof.C),\n\t\tid: proof.id,\n\t\tsecret: new TextEncoder().encode(proof.secret),\n\t\twitness: proof.witness ? JSON.parse(proof.witness) : undefined\n\t};\n};\nexport const serializeBlindedMessage = (\n\tbm: BlindedMessage,\n\tamount: number\n): SerializedBlindedMessage => {\n\treturn {\n\t\tB_: bm.B_.toHex(true),\n\t\tamount: amount\n\t};\n};\n"],"names":["createRandomBlindedMessage","privateKey","blindMessage","randomBytes","bytesToNumber","secp256k1","secret","r","Y","hashToCurve","rG","B_","getSignedOutput","unblindSignature","C_","A","constructProofFromPromise","promise","key","C","serializeProof","proof","deserializeProof","pointFromHex","serializeBlindedMessage","bm","amount"],"mappings":";;;;;AAsBO,SAASA,EAA2BC,GAAsC;AACzE,SAAAC;AAAA,IACNC,EAAY,EAAE;AAAA,IACdC,EAAcC,EAAU,MAAM,kBAAkB;AAAA,IAChDJ;AAAA,EACD;AACD;AAEgB,SAAAC,EAAaI,GAAoBC,GAAYN,GAAsC;AAC5F,QAAAO,IAAIC,EAAYH,CAAM;AAC5B,EAAKC,MACJA,IAAIH,EAAcC,EAAU,MAAM,iBAAA,CAAkB;AAErD,QAAMK,IAAKL,EAAU,gBAAgB,KAAK,SAASE,CAAC,GAC9CI,IAAKH,EAAE,IAAIE,CAAE;AACnB,SAAIT,MAAe,SACXW,EAAgB,EAAE,IAAAD,GAAI,GAAAJ,GAAG,QAAAD,EAAA,GAAUL,CAAU,IAE9C,EAAE,IAAAU,GAAI,GAAAJ,GAAG,QAAAD,EAAO;AACxB;AAEgB,SAAAO,EACfC,GACAP,GACAQ,GACwB;AAEjB,SADGD,EAAG,SAASC,EAAE,SAASR,CAAC,CAAC;AAEpC;AAEO,SAASS,EACfC,GACAV,GACAD,GACAY,GACQ;AACR,QAAMH,IAAIG,GACJC,IAAIN,EAAiBI,EAAQ,IAAIV,GAAGQ,CAAC;AAOpC,SANO;AAAA,IACb,IAAIE,EAAQ;AAAA,IACZ,QAAQA,EAAQ;AAAA,IAChB,QAAAX;AAAA,IACA,GAAAa;AAAA,EACD;AAED;AAEa,MAAAC,IAAiB,CAACC,OACvB;AAAA,EACN,QAAQA,EAAM;AAAA,EACd,GAAGA,EAAM,EAAE,MAAM,EAAI;AAAA,EACrB,IAAIA,EAAM;AAAA,EACV,QAAQ,IAAI,YAAA,EAAc,OAAOA,EAAM,MAAM;AAAA,EAC7C,SAAS,KAAK,UAAUA,EAAM,OAAO;AACtC,IAGYC,IAAmB,CAACD,OACzB;AAAA,EACN,QAAQA,EAAM;AAAA,EACd,GAAGE,EAAaF,EAAM,CAAC;AAAA,EACvB,IAAIA,EAAM;AAAA,EACV,QAAQ,IAAI,YAAA,EAAc,OAAOA,EAAM,MAAM;AAAA,EAC7C,SAASA,EAAM,UAAU,KAAK,MAAMA,EAAM,OAAO,IAAI;AACtD,IAEYG,IAA0B,CACtCC,GACAC,OAEO;AAAA,EACN,IAAID,EAAG,GAAG,MAAM,EAAI;AAAA,EACpB,QAAAC;AACD;"}